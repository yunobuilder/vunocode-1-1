// üöÄ VUNOCODE DEPLOY SCRIPT (100% CORRIGIDO E OTIMIZADO)
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

// ========== CONFIG ==========
const projectDir = path.resolve(__dirname);
const logFile = path.join(projectDir, 'deploy.log');
const requiredFiles = ['package.json', 'pages', 'components', 'styles', 'tailwind.config.js', 'postcss.config.js'];

// ========== FUN√á√ïES ==========

// ‚úÖ Valida√ß√£o da estrutura
function validateStructure() {
    console.log('üîç Validando estrutura do projeto...\n');
    let allOk = true;
    requiredFiles.forEach((item) => {
        const fullPath = path.join(projectDir, item);
        if (!fs.existsSync(fullPath)) {
            console.error(`‚ùå FALTA: ${item}`);
            allOk = false;
        } else {
            console.log(`‚úîÔ∏è OK: ${item}`);
        }
    });
    if (allOk) {
        console.log('\n‚úÖ Estrutura validada com sucesso.\n');
    } else {
        console.error('\nüö® Problemas encontrados. Corrija antes de continuar.\n');
        process.exit(1);
    }
}

// ‚úÖ Checar se Vercel est√° configurado
function checkVercelConfig() {
    const vercelDir = path.join(projectDir, '.vercel');
    if (!fs.existsSync(vercelDir)) {
        console.error('\nüö® ERRO: Configura√ß√£o do Vercel n√£o encontrada (.vercel).');
        console.error('‚û°Ô∏è Rode: npx vercel login && npx vercel link\n');
        process.exit(1);
    } else {
        console.log('‚úîÔ∏è Configura√ß√£o do Vercel detectada (.vercel)\n');
    }
}

// ‚úÖ Checar se o usu√°rio est√° logado
function checkVercelLogin() {
    return new Promise((resolve, reject) => {
        exec('npx vercel whoami', (error, stdout, stderr) => {
            if (error) {
                console.error('\nüö® N√£o est√° logado no Vercel. Fa√ßa login com: npx vercel login\n');
                process.exit(1);
            } else {
                console.log(`üë§ Logado como: ${stdout.trim()}\n`);
                resolve();
            }
        });
    });
}

// ‚ñ∂Ô∏è Executar comando (ex: build ou deploy)
function runCommand(command, descricao) {
    console.log(`\n‚ñ∂Ô∏è ${descricao}...`);
    const process = exec(command);
    process.stdout.on('data', (data) => {
        console.log(data.toString());
        fs.appendFileSync(logFile, data.toString());
    });
    process.stderr.on('data', (data) => {
        console.error(data.toString());
        fs.appendFileSync(logFile, data.toString());
    });
    process.on('exit', (code) => {
        if (code === 0) {
            console.log(`‚úÖ ${descricao} conclu√≠do com sucesso! ‚úÖ\n`);
        } else {
            console.error(`‚ùå ${descricao} falhou (c√≥digo ${code}). Verifique os logs.\n`);
        }
    });
}

// ========== INSTRU√á√ïES ==========
console.log(`
===========================================
üöÄ VUNOCODE DEPLOY - MODO AUTO EVOLUTIVO
===========================================
‚úîÔ∏è Valida√ß√£o completa da estrutura do projeto
‚úîÔ∏è Checagem de login e configura√ß√£o do Vercel
‚úîÔ∏è Deploy autom√°tico no Vercel (--prod)
‚úîÔ∏è Nenhuma p√°gina/component existente ser√° sobrescrita
‚úîÔ∏è Logs gravados em: deploy.log
‚úîÔ∏è Tailwind + PostCSS validados
===========================================
`);

// ========== EXECU√á√ÉO ==========
(async () => {
    validateStructure();
    checkVercelConfig();
    await checkVercelLogin();

    // 1Ô∏è‚É£ Build do projeto
    runCommand('npm run build', 'Executando build do projeto');

    // 2Ô∏è‚É£ Deploy no Vercel (produ√ß√£o)
    runCommand('npx vercel --prod', 'Deploy no Vercel (produ√ß√£o)');
})();
