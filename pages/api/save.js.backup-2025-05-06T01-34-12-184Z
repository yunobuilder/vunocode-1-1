import fs from 'fs';
import path from 'path';

export default async function handler(req, res) {
  const { path: filePath, content, overwrite = false } = req.body;

  if (!filePath || !content) {
    return res.status(400).json({ message: '‚ùó Caminho e conte√∫do s√£o obrigat√≥rios.' });
  }

  try {
    const baseDir = process.cwd(); // raiz do projeto
    const absolutePath = path.join(baseDir, filePath.replace(/\.\.\/+/g, ''));

    // Garante que o diret√≥rio existe
    const dir = path.dirname(absolutePath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    // Se o arquivo j√° existe
    if (fs.existsSync(absolutePath)) {
      if (overwrite) {
        // Cria um backup antes de sobrescrever
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const backupPath = `${absolutePath}.backup-${timestamp}`;
        fs.copyFileSync(absolutePath, backupPath);
        fs.writeFileSync(absolutePath, content, 'utf8');
        console.log(`üìù Backup criado: ${backupPath}`);
        console.log(`‚úÖ Arquivo sobrescrito: ${absolutePath}`);
        return res.status(200).json({
          message: `üìù Backup criado em: ${backupPath} | ‚úÖ Arquivo sobrescrito: ${absolutePath}`,
          backup: backupPath,
          updated: true
        });
      } else {
        console.log(`‚ö†Ô∏è Arquivo j√° existe (ignorado): ${absolutePath}`);
        return res.status(200).json({
          message: `‚ö†Ô∏è Arquivo j√° existe (ignorado): ${absolutePath}`,
          skipped: true
        });
      }
    }

    // Arquivo novo
    fs.writeFileSync(absolutePath, content, 'utf8');
    console.log(`‚úÖ Arquivo salvo em: ${absolutePath}`);
    return res.status(200).json({
      message: `‚úÖ Arquivo salvo em: ${absolutePath}`,
      created: true
    });

  } catch (err) {
    console.error('‚ùå Erro ao salvar o arquivo:', err);
    return res.status(500).json({ message: '‚ùå Erro ao salvar o arquivo.' });
  }
}
